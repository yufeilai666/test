name: 2 Update EPG Files

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '30 */4 * * *'  # UTC时间每4小时的30分钟运行

jobs:
  update-epg:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytz
        
    - name: Create epg directory if not exists
      run: mkdir -p epg
      
    - name: Download EPG files with retry
      run: |
        cat > download_epg.py << 'EOF'
        import json
        import requests
        import os
        import time
        from pathlib import Path
        
        # 读取配置文件
        with open('files.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        epg_urls = config.get('epg_url', {})
        epg_dir = Path('epg')
        
        # 确保目录存在
        epg_dir.mkdir(exist_ok=True)
        
        print(f"⬇️ 开始下载 {len(epg_urls)} 个EPG文件...")
        print("="*36 + "\n\n")
        print("*"*36)
        
        success_count = 0
        fail_count = 0
        
        for filename, url in epg_urls.items():
            max_retries = 3
            retry_delay = 2  # 重试延迟秒数
            
            for attempt in range(max_retries):
                try:
                    print(f"🚀 正在下载: {filename} (尝试 {attempt + 1}/{max_retries})")
                    
                    # 设置请求头
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (compatible; GitHub-Actions-EPG-Downloader/1.0)',
                        'Accept-Encoding': 'gzip'
                    }
                    
                    # 下载文件
                    response = requests.get(url, headers=headers, timeout=60)
                    response.raise_for_status()  # 如果状态码不是200会抛出异常
                    
                    # 保存文件
                    file_path = epg_dir / filename
                    with open(file_path, 'wb') as f:
                        f.write(response.content)
                    
                    file_size = len(response.content)
                    print(f"✅ 成功下载: {filename} ({file_size} 字节)")
                    print("*"*36)
                    success_count += 1
                    break  # 成功则跳出重试循环
                    
                except Exception as e:
                    print(f"⚠️ 下载失败 {filename} (尝试 {attempt + 1}/{max_retries}): {str(e)}")
                    
                    # 如果是最后一次尝试仍然失败
                    if attempt == max_retries - 1:
                        print(f"❌ 放弃下载 {filename}，已达到最大重试次数")
                        print("*"*36)
                        fail_count += 1
                    else:
                        # 不是最后一次失败，等待后重试
                        print(f"\n⏳️ 等待 {retry_delay} 秒后重试...")
                        time.sleep(retry_delay)
                        retry_delay *= 1.5  # 指数退避策略
        
        print("\n\n" + "="*36)
        print(f"🎉 下载完成: 成功 {success_count} 个, 失败 {fail_count} 个")
        
        # 如果有失败的文件，以代码0退出（不中断工作流）
        exit(0)
        
        EOF
        
        python download_epg.py
        
    - name: Clean up temporary script
      run: rm -f download_epg.py
        
    - name: Check for changes
      id: check_changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "📁 EPG目录内容:"
        ls -la epg/
        
        # 更直接的方法：先添加epg目录到暂存区，然后检查是否有变化
        git add epg/
        
        # 检查暂存区与HEAD之间是否有差异
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "ℹ️ 没有检测到EPG文件变动"
          # 重置暂存区，因为我们没有实际变化
          git reset
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "☑️ 检测到EPG文件变动"
          git status epg/
        fi
        
    - name: Get Beijing time
      if: steps.check_changes.outputs.changes == 'true'
      id: beijing_time
      run: |
        # 安装时区数据
        sudo apt-get update && sudo apt-get install -y tzdata
        
        # 获取北京时间并格式化为所需格式
        BEIJING_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')
        echo "beijing_time=$BEIJING_TIME" >> $GITHUB_OUTPUT
        echo "⏲️ 当前北京时间: $BEIJING_TIME"
        
    - name: Commit and push if changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git commit -m "🔄 自动更新EPG文件 [${{ steps.beijing_time.outputs.beijing_time }}]"
        git push